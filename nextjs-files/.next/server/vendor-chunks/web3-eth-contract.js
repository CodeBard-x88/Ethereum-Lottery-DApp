"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-eth-contract";
exports.ids = ["vendor-chunks/web3-eth-contract"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/contract.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Contract: () => (/* binding */ Contract)\n/* harmony export */ });\n/* harmony import */ var web3_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/web3-core/lib/esm/index.js\");\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/esm/index.js\");\n/* harmony import */ var web3_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! web3-types */ \"(ssr)/./node_modules/web3-types/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/* harmony import */ var _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./log_subscription.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst contractSubscriptions = {\n    logs: _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__.LogsSubscription,\n    newHeads: web3_eth__WEBPACK_IMPORTED_MODULE_2__.NewHeadsSubscription,\n    newBlockHeaders: web3_eth__WEBPACK_IMPORTED_MODULE_2__.NewHeadsSubscription\n};\n/**\n * The `web3.eth.Contract` makes it easy to interact with smart contracts on the ethereum blockchain.\n * For using contract package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that contracts features can be used as mentioned in following snippet.\n * ```ts\n *\n * import { Web3 } from 'web3';\n *\n * const web3 = new Web3('https://127.0.0.1:4545');\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(abi,'0xdAC17F958D2ee523a2206206994597C13D831ec7');\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * For using individual package install `web3-eth-contract` and `web3-core` packages using: `npm i web3-eth-contract web3-core` or `yarn add web3-eth-contract web3-core`. This is more efficient approach for building lightweight applications.\n * ```ts\n *\n * import { Web3Context } from 'web3-core';\n * import { Contract } from 'web3-eth-contract';\n *\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(\n * \tabi,\n * \t'0xdAC17F958D2ee523a2206206994597C13D831ec7'\n * \t new Web3Context('http://127.0.0.1:8545'));\n *\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * ## Generated Methods\n * Following methods are generated by web3.js contract object for each of contract functions by using its ABI.\n *\n * ### send\n * This is used to send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableTxOptions | NonPayableTxOptions\n *\n * #### Returns\n * [Web3PromiEvent](/api/web3/namespace/core#Web3PromiEvent) : Web3 Promi Event\n *\n * ```ts\n * // using the promise\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.then(function(receipt){\n * \t\t// other parts of code to use receipt\n * \t});\n *\n *\n * // using the event emitter\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.on('transactionHash', function(hash){\n * \t\t// ...\n * \t})\n * \t.on('confirmation', function(confirmationNumber, receipt){\n * \t\t// ...\n * \t})\n * \t.on('receipt', function(receipt){\n * \t\t// ...\n * \t})\n * \t.on('error', function(error, receipt) {\n * \t\t// ...\n * \t});\n *\n * ```\n *\n * ### call\n * This will execute smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise : having results of call\n *\n * ```ts\n *\n * let myContract = new web3.eth.Contract(abi, address);\n *\n * myContract.methods.myFunction().call()\n * .then(console.log);\n *\n * ```\n * ### estimateGas\n * Returns the amount of gas consumed by executing the method in EVM without creating a new transaction on the blockchain. The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be different when sending the transaction later, as the state of the smart contract can be different at that time.\n *\n * #### Parameters\n * options?: PayableCallOptions,\n * returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n *\n * #### Returns\n * Promise: The gas amount estimated.\n *\n * ```ts\n * const estimatedGas = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .estimateGas();\n *\n * ```\n *\n * ### encodeABI\n * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format. This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments. Set the data field on web3.eth.sendTransaction options as the encodeABI() result and it is the same as calling the contract method with contract.myMethod.send().\n *\n * Some use cases for encodeABI() include: preparing a smart contract transaction for a multisignature wallet, working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n *\n * #### Parameters\n * None\n *\n * #### Returns\n * String: The encoded ABI.\n *\n * ```ts\n * const encodedABI = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .encodeABI();\n *\n * ```\n *\n * ### createAccessList\n * This will create an access list a method execution will access when executed in the EVM.\n * Note: You must specify a from address and gas if it’s not specified in options when instantiating parent contract object.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise: The generated access list for transaction.\n *\n * ```ts\n * const accessList = await contract.methods.approve('0xbEe634C21c16F05B03B704BaE071536121e6cFeA', 300)\n *     .createAccessList({\n *         from: \"0x9992695e1053bb737d3cfae4743dcfc4b94f203d\"\n *    });\n * ```\n *\n */ class Contract extends web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context {\n    constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat){\n        var _a, _b, _c;\n        // eslint-disable-next-line no-nested-ternary\n        const options = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isContractInitOptions)(addressOrOptionsOrContext) ? addressOrOptionsOrContext : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isContractInitOptions)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : undefined;\n        let contractContext;\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isWeb3ContractContext)(addressOrOptionsOrContext)) {\n            contractContext = addressOrOptionsOrContext;\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isWeb3ContractContext)(optionsOrContextOrReturnFormat)) {\n            contractContext = optionsOrContextOrReturnFormat;\n        } else {\n            contractContext = contextOrReturnFormat;\n        }\n        let provider;\n        if (typeof addressOrOptionsOrContext === \"object\" && \"provider\" in addressOrOptionsOrContext) {\n            provider = addressOrOptionsOrContext.provider;\n        } else if (typeof optionsOrContextOrReturnFormat === \"object\" && \"provider\" in optionsOrContextOrReturnFormat) {\n            provider = optionsOrContextOrReturnFormat.provider;\n        } else if (typeof contextOrReturnFormat === \"object\" && \"provider\" in contextOrReturnFormat) {\n            provider = contextOrReturnFormat.provider;\n        } else {\n            provider = Contract.givenProvider;\n        }\n        super(Object.assign(Object.assign({}, contractContext), {\n            provider,\n            registeredSubscriptions: contractSubscriptions\n        }));\n        /**\n         * Set to true if you want contracts' defaults to sync with global defaults.\n         */ this.syncWithContext = false;\n        this._functions = {};\n        // Init protected properties\n        if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.wallet) {\n            this._wallet = contractContext.wallet;\n        }\n        if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.accountProvider) {\n            this._accountProvider = contractContext.accountProvider;\n        }\n        if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options) && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options.data) && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options.input) && this.config.contractDataInputFill !== \"both\") throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractTransactionDataAndInputError({\n            data: options.data,\n            input: options.input\n        });\n        this._overloadedMethodAbis = new Map();\n        // eslint-disable-next-line no-nested-ternary\n        const returnDataFormat = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(contextOrReturnFormat) ? contextOrReturnFormat : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT;\n        const address = typeof addressOrOptionsOrContext === \"string\" ? addressOrOptionsOrContext : undefined;\n        this.config.contractDataInputFill = (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;\n        this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n        if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(address)) {\n            this._parseAndSetAddress(address, returnDataFormat);\n        }\n        this.options = {\n            address,\n            jsonInterface: this._jsonInterface,\n            gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,\n            gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,\n            from: options === null || options === void 0 ? void 0 : options.from,\n            input: options === null || options === void 0 ? void 0 : options.input,\n            data: options === null || options === void 0 ? void 0 : options.data\n        };\n        this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;\n        if (contractContext instanceof web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context) {\n            this.subscribeToContextEvents(contractContext);\n        }\n        Object.defineProperty(this.options, \"address\", {\n            set: (value)=>this._parseAndSetAddress(value, returnDataFormat),\n            get: ()=>this._address\n        });\n        Object.defineProperty(this.options, \"jsonInterface\", {\n            set: (value)=>this._parseAndSetJsonInterface(value, returnDataFormat),\n            get: ()=>this._jsonInterface\n        });\n        if (contractContext instanceof web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context) {\n            contractContext.on(web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3ConfigEvent.CONFIG_CHANGE, (event)=>{\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                this.setConfig({\n                    [event.name]: event.newValue\n                });\n            });\n        }\n    }\n    /**\n     * Subscribe to an event.\n     *\n     * ```ts\n     * await myContract.events.MyEvent([options])\n     * ```\n     *\n     * There is a special event `allEvents` that can be used to subscribe all events.\n     *\n     * ```ts\n     * await myContract.events.allEvents([options])\n     * ```\n     *\n     * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n     */ get events() {\n        return this._events;\n    }\n    /**\n     * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n     *\n     * The methods of this smart contract are available through:\n     *\n     * The name: `myContract.methods.myMethod(123)`\n     * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n     * The signature `myContract.methods['0x58cf5f10'](123)`\n     *\n     * This allows calling functions with same name but different parameters from the JavaScript contract object.\n     *\n     * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n     *\n     * ```ts\n     * // calling a method\n     * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     *\n     * // or sending and using a promise\n     * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     *\n     * // or sending and using the events\n     * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     * sendObject.on('transactionHash', function(hash){\n     *   ...\n     * });\n     * sendObject.on('receipt', function(receipt){\n     *   ...\n     * });\n     * sendObject.on('confirmation', function(confirmationNumber, receipt){\n     *   ...\n     * });\n     * sendObject.on('error', function(error, receipt) {\n     *   ...\n     * });\n     * ```\n     *\n     * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n     */ get methods() {\n        return this._methods;\n    }\n    /**\n     * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n     *\n     * @returns - The new contract instance.\n     *\n     * ```ts\n     * const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n     *\n     * const contract2 = contract1.clone();\n     * contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n     *\n     * (contract1.options.address !== contract2.options.address);\n     * > true\n     * ```\n     */ clone() {\n        let newContract;\n        if (this.options.address) {\n            newContract = new Contract([\n                ...this._jsonInterface,\n                ...this._errorsInterface\n            ], this.options.address, {\n                gas: this.options.gas,\n                gasPrice: this.options.gasPrice,\n                from: this.options.from,\n                input: this.options.input,\n                data: this.options.data,\n                provider: this.currentProvider,\n                syncWithContext: this.syncWithContext,\n                dataInputFill: this.config.contractDataInputFill\n            }, this.getContextObject());\n        } else {\n            newContract = new Contract([\n                ...this._jsonInterface,\n                ...this._errorsInterface\n            ], {\n                gas: this.options.gas,\n                gasPrice: this.options.gasPrice,\n                from: this.options.from,\n                input: this.options.input,\n                data: this.options.data,\n                provider: this.currentProvider,\n                syncWithContext: this.syncWithContext,\n                dataInputFill: this.config.contractDataInputFill\n            }, this.getContextObject());\n        }\n        if (this.context) newContract.subscribeToContextEvents(this.context);\n        return newContract;\n    }\n    /**\n     * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n     *\n     * ```ts\n     * myContract.deploy({\n     *   input: '0x12345...', // data keyword can be used, too.\n     *   arguments: [123, 'My String']\n     * })\n     * .send({\n     *   from: '0x1234567890123456789012345678901234567891',\n     *   gas: 1500000,\n     *   gasPrice: '30000000000000'\n     * }, function(error, transactionHash){ ... })\n     * .on('error', function(error){ ... })\n     * .on('transactionHash', function(transactionHash){ ... })\n     * .on('receipt', function(receipt){\n     *  console.log(receipt.contractAddress) // contains the new contract address\n     * })\n     * .on('confirmation', function(confirmationNumber, receipt){ ... })\n     * .then(function(newContractInstance){\n     *   console.log(newContractInstance.options.address) // instance with the new contract address\n     * });\n     *\n     *\n     * // When the data is already set as an option to the contract itself\n     * myContract.options.data = '0x12345...';\n     *\n     * myContract.deploy({\n     *   arguments: [123, 'My String']\n     * })\n     * .send({\n     *   from: '0x1234567890123456789012345678901234567891',\n     *   gas: 1500000,\n     *   gasPrice: '30000000000000'\n     * })\n     * .then(function(newContractInstance){\n     *   console.log(newContractInstance.options.address) // instance with the new contract address\n     * });\n     *\n     *\n     * // Simply encoding\n     * myContract.deploy({\n     *   input: '0x12345...',\n     *   arguments: [123, 'My String']\n     * })\n     * .encodeABI();\n     * > '0x12345...0000012345678765432'\n     *\n     *\n     * // Gas estimation\n     * myContract.deploy({\n     *   input: '0x12345...',\n     *   arguments: [123, 'My String']\n     * })\n     * .estimateGas(function(err, gas){\n     *   console.log(gas);\n     * });\n     * ```\n     *\n     * @returns - The transaction object\n     */ deploy(deployOptions) {\n        var _a, _b, _c;\n        let abi = this._jsonInterface.find((j)=>j.type === \"constructor\");\n        if (!abi) {\n            abi = {\n                type: \"constructor\",\n                stateMutability: \"\"\n            };\n        }\n        const _input = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"bytes\"\n        }, (_a = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.input) !== null && _a !== void 0 ? _a : this.options.input, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n        const _data = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"bytes\"\n        }, (_b = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.data) !== null && _b !== void 0 ? _b : this.options.data, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n        if ((!_input || _input.trim() === \"0x\") && (!_data || _data.trim() === \"0x\")) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(\"contract creation without any data provided.\");\n        }\n        const args = (_c = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.arguments) !== null && _c !== void 0 ? _c : [];\n        const contractOptions = Object.assign(Object.assign({}, this.options), {\n            input: _input,\n            data: _data\n        });\n        const deployData = _input !== null && _input !== void 0 ? _input : _data;\n        return {\n            arguments: args,\n            send: (options)=>{\n                const modifiedOptions = Object.assign({}, options);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return this._contractMethodDeploySend(abi, args, modifiedOptions, contractOptions);\n            },\n            estimateGas: (options, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT)=>__awaiter(this, void 0, void 0, function*() {\n                    const modifiedOptions = Object.assign({}, options);\n                    return this._contractMethodEstimateGas({\n                        abi: abi,\n                        params: args,\n                        returnFormat,\n                        options: modifiedOptions,\n                        contractOptions\n                    });\n                }),\n            encodeABI: ()=>(0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeMethodABI)(abi, args, (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n                    format: \"bytes\"\n                }, deployData, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT))\n        };\n    }\n    getPastEvents(param1, param2, param3) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const eventName = typeof param1 === \"string\" ? param1 : web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS;\n            const options = // eslint-disable-next-line no-nested-ternary\n            typeof param1 !== \"string\" && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param1) ? param1 : !(0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param2) ? param2 : {};\n            // eslint-disable-next-line no-nested-ternary\n            const returnFormat = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param1) ? param1 : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT;\n            const abi = eventName === \"allEvents\" || eventName === web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS ? web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS_ABI : this._jsonInterface.find((j)=>\"name\" in j && j.name === eventName);\n            if (!abi) {\n                throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(`Event ${eventName} not found.`);\n            }\n            const { fromBlock, toBlock, topics, address } = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeEventABI)(this.options, abi, options !== null && options !== void 0 ? options : {});\n            const logs = yield (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.getLogs)(this, {\n                fromBlock,\n                toBlock,\n                topics,\n                address\n            }, returnFormat);\n            const decodedLogs = logs ? logs.map((log)=>typeof log === \"string\" ? log : (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.decodeEventABI)(abi, log, this._jsonInterface, returnFormat)) : [];\n            const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n            const filterKeys = Object.keys(filter);\n            if (filterKeys.length > 0) {\n                return decodedLogs.filter((log)=>{\n                    if (typeof log === \"string\") return true;\n                    return filterKeys.every((key)=>{\n                        var _a;\n                        if (Array.isArray(filter[key])) {\n                            return filter[key].some((v)=>String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());\n                        }\n                        const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter((input)=>input.name === key)[0];\n                        if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === \"string\") {\n                            const hashedIndexedString = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.keccak256)(filter[key]);\n                            if (hashedIndexedString === String(log.returnValues[key])) return true;\n                        }\n                        return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();\n                    });\n                });\n            }\n            return decodedLogs;\n        });\n    }\n    _parseAndSetAddress(value, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT) {\n        this._address = value ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.toChecksumAddress)((0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"address\"\n        }, value, returnFormat)) : value;\n    }\n    _parseAndSetJsonInterface(abis, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT) {\n        var _a, _b, _c, _d, _e;\n        this._functions = {};\n        this._methods = {};\n        this._events = {};\n        let result = [];\n        const functionsAbi = abis.filter((abi)=>abi.type !== \"error\");\n        const errorsAbi = abis.filter((abi)=>(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiErrorFragment)(abi));\n        for (const a of functionsAbi){\n            const abi = Object.assign(Object.assign({}, a), {\n                signature: \"\"\n            });\n            if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiFunctionFragment)(abi)) {\n                const methodName = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(abi);\n                const methodSignature = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.encodeFunctionSignature)(methodName);\n                abi.signature = methodSignature;\n                // make constant and payable backwards compatible\n                abi.constant = (_b = (_a = abi.stateMutability === \"view\") !== null && _a !== void 0 ? _a : abi.stateMutability === \"pure\") !== null && _b !== void 0 ? _b : abi.constant;\n                abi.payable = (_c = abi.stateMutability === \"payable\") !== null && _c !== void 0 ? _c : abi.payable;\n                this._overloadedMethodAbis.set(abi.name, [\n                    ...(_d = this._overloadedMethodAbis.get(abi.name)) !== null && _d !== void 0 ? _d : [],\n                    abi\n                ]);\n                const abiFragment = (_e = this._overloadedMethodAbis.get(abi.name)) !== null && _e !== void 0 ? _e : [];\n                const contractMethod = this._createContractMethod(abiFragment, errorsAbi);\n                this._functions[methodName] = {\n                    signature: methodSignature,\n                    method: contractMethod\n                };\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[abi.name] = this._functions[methodName].method;\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[methodName] = this._functions[methodName].method;\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[methodSignature] = this._functions[methodName].method;\n            } else if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiEventFragment)(abi)) {\n                const eventName = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(abi);\n                const eventSignature = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.encodeEventSignature)(eventName);\n                const event = this._createContractEvent(abi, returnFormat);\n                abi.signature = eventSignature;\n                if (!(eventName in this._events) || abi.name === \"bound\") {\n                    // It's a private type and we don't want to expose it and no need to check\n                    this._events[eventName] = event;\n                }\n                // It's a private type and we don't want to expose it and no need to check\n                this._events[abi.name] = event;\n                // It's a private type and we don't want to expose it and no need to check\n                this._events[eventSignature] = event;\n            }\n            result = [\n                ...result,\n                abi\n            ];\n        }\n        this._events.allEvents = this._createContractEvent(web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS_ABI, returnFormat);\n        this._jsonInterface = [\n            ...result\n        ];\n        this._errorsInterface = errorsAbi;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    _getAbiParams(abi, params) {\n        var _a;\n        try {\n            return web3_validator__WEBPACK_IMPORTED_MODULE_6__.utils.transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);\n        } catch (error) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);\n        }\n    }\n    _createContractMethod(abiArr, errorsAbis) {\n        const abi = abiArr[abiArr.length - 1];\n        return (...params)=>{\n            var _a, _b;\n            let abiParams;\n            const abis = (_a = this._overloadedMethodAbis.get(abi.name)) !== null && _a !== void 0 ? _a : [];\n            let methodAbi = abis[0];\n            const internalErrorsAbis = errorsAbis;\n            const arrayOfAbis = abis.filter((_abi)=>{\n                var _a;\n                return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length;\n            });\n            if (abis.length === 1 || arrayOfAbis.length === 0) {\n                abiParams = this._getAbiParams(methodAbi, params);\n                web3_validator__WEBPACK_IMPORTED_MODULE_6__.validator.validate((_b = abi.inputs) !== null && _b !== void 0 ? _b : [], abiParams);\n            } else {\n                const errors = [];\n                for (const _abi of arrayOfAbis){\n                    try {\n                        abiParams = this._getAbiParams(_abi, params);\n                        web3_validator__WEBPACK_IMPORTED_MODULE_6__.validator.validate(_abi.inputs, abiParams);\n                        methodAbi = _abi;\n                        break;\n                    } catch (e) {\n                        errors.push(e);\n                    }\n                }\n                if (errors.length === arrayOfAbis.length) {\n                    throw new web3_validator__WEBPACK_IMPORTED_MODULE_6__.Web3ValidatorError(errors);\n                }\n            }\n            const methods = {\n                arguments: abiParams,\n                call: (options, block)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);\n                    }),\n                send: (options)=>this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n                estimateGas: (options, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodEstimateGas({\n                            abi: methodAbi,\n                            params: abiParams,\n                            returnFormat,\n                            options\n                        });\n                    }),\n                encodeABI: ()=>(0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeMethodABI)(methodAbi, abiParams),\n                createAccessList: (options, block)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);\n                    })\n            };\n            if (methodAbi.stateMutability === \"payable\") {\n                return methods;\n            }\n            return methods;\n        };\n    }\n    _contractMethodCall(abi, params, errorsAbi, options, block) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getEthTxCallParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: Object.assign(Object.assign({}, this.options), {\n                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n                })\n            });\n            try {\n                const result = yield (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.call)(this, tx, block, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n                return (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.decodeMethodReturn)(abi, result);\n            } catch (error) {\n                if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                    // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                    (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.cause);\n                }\n                throw error;\n            }\n        });\n    }\n    _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getCreateAccessListParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: Object.assign(Object.assign({}, this.options), {\n                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n                })\n            });\n            try {\n                return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.createAccessList)(this, tx, block, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n            } catch (error) {\n                if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                    // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                    (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.cause);\n                }\n                throw error;\n            }\n        });\n    }\n    _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {\n        var _a, _b;\n        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n            input: undefined,\n            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n        });\n        const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getSendTxParams)({\n            abi,\n            params,\n            options: Object.assign(Object.assign({}, options), {\n                dataInputFill: this.config.contractDataInputFill\n            }),\n            contractOptions: modifiedContractOptions\n        });\n        const transactionToSend = (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.sendTransaction)(this, tx, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT, {\n            // TODO Should make this configurable by the user\n            checkRevertBeforeSending: false,\n            contractAbi: this._jsonInterface\n        });\n        // eslint-disable-next-line no-void\n        void transactionToSend.on(\"error\", (error)=>{\n            if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.cause);\n            }\n        });\n        return transactionToSend;\n    }\n    _contractMethodDeploySend(abi, params, options, contractOptions) {\n        var _a, _b;\n        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n        });\n        const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getSendTxParams)({\n            abi,\n            params,\n            options: Object.assign(Object.assign({}, options), {\n                dataInputFill: this.config.contractDataInputFill\n            }),\n            contractOptions: modifiedContractOptions\n        });\n        return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.sendTransaction)(this, tx, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT, {\n            transactionResolver: (receipt)=>{\n                if (receipt.status === BigInt(0)) {\n                    throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(\"code couldn't be stored\", receipt);\n                }\n                const newContract = this.clone();\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                newContract.options.address = receipt.contractAddress;\n                return newContract;\n            },\n            contractAbi: this._jsonInterface,\n            // TODO Should make this configurable by the user\n            checkRevertBeforeSending: false\n        });\n    }\n    _contractMethodEstimateGas({ abi, params, returnFormat, options, contractOptions }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getEstimateGasParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options\n            });\n            return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.estimateGas)(this, tx, web3_types__WEBPACK_IMPORTED_MODULE_4__.BlockTags.LATEST, returnFormat);\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    _createContractEvent(abi, returnFormat = web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT) {\n        return (...params)=>{\n            var _a;\n            const { topics, fromBlock } = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeEventABI)(this.options, abi, params[0]);\n            const sub = new _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__.LogsSubscription({\n                address: this.options.address,\n                topics,\n                abi,\n                jsonInterface: this._jsonInterface\n            }, {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                subscriptionManager: this.subscriptionManager,\n                returnFormat\n            });\n            if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(fromBlock)) {\n                // emit past events when fromBlock is defined\n                this.getPastEvents(abi.name, {\n                    fromBlock,\n                    topics\n                }, returnFormat).then((logs)=>{\n                    if (logs) {\n                        logs.forEach((log)=>sub.emit(\"data\", log));\n                    }\n                }).catch((error)=>{\n                    sub.emit(\"error\", new web3_errors__WEBPACK_IMPORTED_MODULE_1__.SubscriptionError(\"Failed to get past events.\", error));\n                });\n            }\n            (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.addSubscription(sub).catch((error)=>{\n                sub.emit(\"error\", new web3_errors__WEBPACK_IMPORTED_MODULE_1__.SubscriptionError(\"Failed to subscribe.\", error));\n            });\n            return sub;\n        };\n    }\n    subscribeToContextEvents(context) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const contractThis = this;\n        this.context = context;\n        if (contractThis.syncWithContext) {\n            context.on(web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3ConfigEvent.CONFIG_CHANGE, (event)=>{\n                contractThis.setConfig({\n                    [event.name]: event.newValue\n                });\n            });\n        }\n    }\n} //# sourceMappingURL=contract.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/encoding.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeEventABI: () => (/* reexport safe */ web3_eth__WEBPACK_IMPORTED_MODULE_3__.decodeEventABI),\n/* harmony export */   decodeMethodReturn: () => (/* binding */ decodeMethodReturn),\n/* harmony export */   encodeEventABI: () => (/* binding */ encodeEventABI),\n/* harmony export */   encodeMethodABI: () => (/* binding */ encodeMethodABI)\n/* harmony export */ });\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-types */ \"(ssr)/./node_modules/web3-types/lib/esm/index.js\");\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\nconst encodeEventABI = ({ address }, event, options)=>{\n    var _a, _b;\n    const topics = options === null || options === void 0 ? void 0 : options.topics;\n    const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n    const opts = {};\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.isNullish)(options === null || options === void 0 ? void 0 : options.fromBlock)) {\n        opts.fromBlock = (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.format)(web3_eth__WEBPACK_IMPORTED_MODULE_3__.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {\n            number: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_NUMBER.HEX,\n            bytes: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_BYTES.HEX\n        });\n    }\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.isNullish)(options === null || options === void 0 ? void 0 : options.toBlock)) {\n        opts.toBlock = (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.format)(web3_eth__WEBPACK_IMPORTED_MODULE_3__.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {\n            number: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_NUMBER.HEX,\n            bytes: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_BYTES.HEX\n        });\n    }\n    if (topics && Array.isArray(topics)) {\n        opts.topics = [\n            ...topics\n        ];\n    } else {\n        opts.topics = [];\n        // add event signature\n        if (event && !event.anonymous && ![\n            web3_eth__WEBPACK_IMPORTED_MODULE_3__.ALL_EVENTS,\n            \"allEvents\"\n        ].includes(event.name)) {\n            opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeEventSignature)((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.jsonInterfaceMethodToString)(event)));\n        }\n        // add event topics (indexed arguments)\n        if (![\n            web3_eth__WEBPACK_IMPORTED_MODULE_3__.ALL_EVENTS,\n            \"allEvents\"\n        ].includes(event.name) && event.inputs) {\n            for (const input of event.inputs){\n                if (!input.indexed) {\n                    continue;\n                }\n                const value = filter[input.name];\n                if (!value) {\n                    // eslint-disable-next-line no-null/no-null\n                    opts.topics.push(null);\n                    continue;\n                }\n                // TODO: https://github.com/ethereum/web3.js/issues/344\n                // TODO: deal properly with components\n                if (Array.isArray(value)) {\n                    opts.topics.push(value.map((v)=>(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameter)(input.type, v)));\n                } else if (input.type === \"string\") {\n                    opts.topics.push((0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.keccak256)(value));\n                } else {\n                    opts.topics.push((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameter)(input.type, value));\n                }\n            }\n        }\n    }\n    if (!opts.topics.length) delete opts.topics;\n    if (address) {\n        opts.address = address.toLowerCase();\n    }\n    return opts;\n};\nconst encodeMethodABI = (abi, args, deployData)=>{\n    const inputLength = Array.isArray(abi.inputs) ? abi.inputs.length : 0;\n    if (abi.inputs && inputLength !== args.length) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_4__.Web3ContractError(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);\n    }\n    let params;\n    if (abi.inputs) {\n        params = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameters)(Array.isArray(abi.inputs) ? abi.inputs : [], args).replace(\"0x\", \"\");\n    } else {\n        params = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.inferTypesAndEncodeParameters)(args).replace(\"0x\", \"\");\n    }\n    if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.isAbiConstructorFragment)(abi)) {\n        if (!deployData) throw new web3_errors__WEBPACK_IMPORTED_MODULE_4__.Web3ContractError(\"The contract has no contract data option set. This is necessary to append the constructor parameters.\");\n        if (!deployData.startsWith(\"0x\")) {\n            return `0x${deployData}${params}`;\n        }\n        return `${deployData}${params}`;\n    }\n    return `${(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionSignature)(abi)}${params}`;\n};\nconst decodeMethodReturn = (abi, returnValues)=>{\n    // If it was constructor then we need to return contract address\n    if (abi.type === \"constructor\") {\n        return returnValues;\n    }\n    if (!returnValues) {\n        // Using \"null\" value intentionally to match legacy behavior\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;\n    if (!abi.outputs) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    const result = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.decodeParameters)([\n        ...abi.outputs\n    ], value);\n    if (result.__length__ === 1) {\n        return result[0];\n    }\n    return result;\n}; //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9lbmNvZGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsR0FDMEQ7QUFDTjtBQUNxSztBQUN0SztBQUNIO0FBQ047QUFDbkMsTUFBTWlCLGlCQUFpQixDQUFDLEVBQUVDLE9BQU8sRUFBRSxFQUFFQyxPQUFPQztJQUMvQyxJQUFJQyxJQUFJQztJQUNSLE1BQU1DLFNBQVNILFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRRyxNQUFNO0lBQy9FLE1BQU1DLFNBQVMsQ0FBQ0gsS0FBS0QsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFJLE1BQU0sTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSUEsS0FBSyxDQUFDO0lBQ3pILE1BQU1JLE9BQU8sQ0FBQztJQUNkLElBQUksQ0FBQ3hCLHFEQUFTQSxDQUFDbUIsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFNLFNBQVMsR0FBRztRQUNqRkQsS0FBS0MsU0FBUyxHQUFHMUIsa0RBQU1BLENBQUNhLGlEQUFXQSxDQUFDYyxVQUFVLENBQUNDLE1BQU0sRUFBRVIsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFNLFNBQVMsRUFBRTtZQUN4SEUsUUFBUXpCLGtEQUFVQSxDQUFDMEIsR0FBRztZQUN0QkMsT0FBTzFCLGlEQUFTQSxDQUFDeUIsR0FBRztRQUN4QjtJQUNKO0lBQ0EsSUFBSSxDQUFDNUIscURBQVNBLENBQUNtQixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVcsT0FBTyxHQUFHO1FBQy9FTixLQUFLTSxPQUFPLEdBQUcvQixrREFBTUEsQ0FBQ2EsaURBQVdBLENBQUNjLFVBQVUsQ0FBQ0MsTUFBTSxFQUFFUixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVcsT0FBTyxFQUFFO1lBQ3BISCxRQUFRekIsa0RBQVVBLENBQUMwQixHQUFHO1lBQ3RCQyxPQUFPMUIsaURBQVNBLENBQUN5QixHQUFHO1FBQ3hCO0lBQ0o7SUFDQSxJQUFJTixVQUFVUyxNQUFNQyxPQUFPLENBQUNWLFNBQVM7UUFDakNFLEtBQUtGLE1BQU0sR0FBRztlQUFJQTtTQUFPO0lBQzdCLE9BQ0s7UUFDREUsS0FBS0YsTUFBTSxHQUFHLEVBQUU7UUFDaEIsc0JBQXNCO1FBQ3RCLElBQUlKLFNBQVMsQ0FBQ0EsTUFBTWUsU0FBUyxJQUFJLENBQUM7WUFBQ3BCLGdEQUFVQTtZQUFFO1NBQVksQ0FBQ3FCLFFBQVEsQ0FBQ2hCLE1BQU1pQixJQUFJLEdBQUc7WUFDOUVYLEtBQUtGLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDLENBQUNmLEtBQUtILE1BQU1tQixTQUFTLE1BQU0sUUFBUWhCLE9BQU8sS0FBSyxJQUFJQSxLQUFLaEIsa0VBQW9CQSxDQUFDTSx5RUFBMkJBLENBQUNPO1FBQzlIO1FBQ0EsdUNBQXVDO1FBQ3ZDLElBQUksQ0FBQztZQUFDTCxnREFBVUE7WUFBRTtTQUFZLENBQUNxQixRQUFRLENBQUNoQixNQUFNaUIsSUFBSSxLQUFLakIsTUFBTW9CLE1BQU0sRUFBRTtZQUNqRSxLQUFLLE1BQU1DLFNBQVNyQixNQUFNb0IsTUFBTSxDQUFFO2dCQUM5QixJQUFJLENBQUNDLE1BQU1DLE9BQU8sRUFBRTtvQkFDaEI7Z0JBQ0o7Z0JBQ0EsTUFBTUMsUUFBUWxCLE1BQU0sQ0FBQ2dCLE1BQU1KLElBQUksQ0FBQztnQkFDaEMsSUFBSSxDQUFDTSxPQUFPO29CQUNSLDJDQUEyQztvQkFDM0NqQixLQUFLRixNQUFNLENBQUNjLElBQUksQ0FBQztvQkFDakI7Z0JBQ0o7Z0JBQ0EsdURBQXVEO2dCQUN2RCxzQ0FBc0M7Z0JBQ3RDLElBQUlMLE1BQU1DLE9BQU8sQ0FBQ1MsUUFBUTtvQkFDdEJqQixLQUFLRixNQUFNLENBQUNjLElBQUksQ0FBQ0ssTUFBTUMsR0FBRyxDQUFDQyxDQUFBQSxJQUFLcEMsNkRBQWVBLENBQUNnQyxNQUFNSyxJQUFJLEVBQUVEO2dCQUNoRSxPQUNLLElBQUlKLE1BQU1LLElBQUksS0FBSyxVQUFVO29CQUM5QnBCLEtBQUtGLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDbkMscURBQVNBLENBQUN3QztnQkFDL0IsT0FDSztvQkFDRGpCLEtBQUtGLE1BQU0sQ0FBQ2MsSUFBSSxDQUFDN0IsNkRBQWVBLENBQUNnQyxNQUFNSyxJQUFJLEVBQUVIO2dCQUNqRDtZQUNKO1FBQ0o7SUFDSjtJQUNBLElBQUksQ0FBQ2pCLEtBQUtGLE1BQU0sQ0FBQ3VCLE1BQU0sRUFDbkIsT0FBT3JCLEtBQUtGLE1BQU07SUFDdEIsSUFBSUwsU0FBUztRQUNUTyxLQUFLUCxPQUFPLEdBQUdBLFFBQVE2QixXQUFXO0lBQ3RDO0lBQ0EsT0FBT3RCO0FBQ1gsRUFBRTtBQUNLLE1BQU11QixrQkFBa0IsQ0FBQ0MsS0FBS0MsTUFBTUM7SUFDdkMsTUFBTUMsY0FBY3BCLE1BQU1DLE9BQU8sQ0FBQ2dCLElBQUlWLE1BQU0sSUFBSVUsSUFBSVYsTUFBTSxDQUFDTyxNQUFNLEdBQUc7SUFDcEUsSUFBSUcsSUFBSVYsTUFBTSxJQUFJYSxnQkFBZ0JGLEtBQUtKLE1BQU0sRUFBRTtRQUMzQyxNQUFNLElBQUkvQiwwREFBaUJBLENBQUMsQ0FBQyxzRkFBc0YsRUFBRXFDLFlBQVksV0FBVyxDQUFDO0lBQ2pKO0lBQ0EsSUFBSUM7SUFDSixJQUFJSixJQUFJVixNQUFNLEVBQUU7UUFDWmMsU0FBUzVDLDhEQUFnQkEsQ0FBQ3VCLE1BQU1DLE9BQU8sQ0FBQ2dCLElBQUlWLE1BQU0sSUFBSVUsSUFBSVYsTUFBTSxHQUFHLEVBQUUsRUFBRVcsTUFBTUksT0FBTyxDQUFDLE1BQU07SUFDL0YsT0FDSztRQUNERCxTQUFTM0MsMkVBQTZCQSxDQUFDd0MsTUFBTUksT0FBTyxDQUFDLE1BQU07SUFDL0Q7SUFDQSxJQUFJM0Msc0VBQXdCQSxDQUFDc0MsTUFBTTtRQUMvQixJQUFJLENBQUNFLFlBQ0QsTUFBTSxJQUFJcEMsMERBQWlCQSxDQUFDO1FBQ2hDLElBQUksQ0FBQ29DLFdBQVdJLFVBQVUsQ0FBQyxPQUFPO1lBQzlCLE9BQU8sQ0FBQyxFQUFFLEVBQUVKLFdBQVcsRUFBRUUsT0FBTyxDQUFDO1FBQ3JDO1FBQ0EsT0FBTyxDQUFDLEVBQUVGLFdBQVcsRUFBRUUsT0FBTyxDQUFDO0lBQ25DO0lBQ0EsT0FBTyxDQUFDLEVBQUU5QyxxRUFBdUJBLENBQUMwQyxLQUFLLEVBQUVJLE9BQU8sQ0FBQztBQUNyRCxFQUFFO0FBQ0ssTUFBTUcscUJBQXFCLENBQUNQLEtBQUtRO0lBQ3BDLGdFQUFnRTtJQUNoRSxJQUFJUixJQUFJSixJQUFJLEtBQUssZUFBZTtRQUM1QixPQUFPWTtJQUNYO0lBQ0EsSUFBSSxDQUFDQSxjQUFjO1FBQ2YsNERBQTREO1FBQzVELDJDQUEyQztRQUMzQyxPQUFPO0lBQ1g7SUFDQSxNQUFNZixRQUFRZSxhQUFhWCxNQUFNLElBQUksSUFBSVcsYUFBYUMsS0FBSyxDQUFDLEtBQUtEO0lBQ2pFLElBQUksQ0FBQ1IsSUFBSVUsT0FBTyxFQUFFO1FBQ2QsMkNBQTJDO1FBQzNDLE9BQU87SUFDWDtJQUNBLE1BQU1DLFNBQVN2RCw4REFBZ0JBLENBQUM7V0FBSTRDLElBQUlVLE9BQU87S0FBQyxFQUFFakI7SUFDbEQsSUFBSWtCLE9BQU9DLFVBQVUsS0FBSyxHQUFHO1FBQ3pCLE9BQU9ELE1BQU0sQ0FBQyxFQUFFO0lBQ3BCO0lBQ0EsT0FBT0E7QUFDWCxFQUFFLENBQ0Ysb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpbGVzLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWNvbnRyYWN0L2xpYi9lc20vZW5jb2RpbmcuanM/MzRjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbmltcG9ydCB7IGZvcm1hdCwgaXNOdWxsaXNoLCBrZWNjYWsyNTYgfSBmcm9tICd3ZWIzLXV0aWxzJztcbmltcG9ydCB7IEZNVF9OVU1CRVIsIEZNVF9CWVRFUywgfSBmcm9tICd3ZWIzLXR5cGVzJztcbmltcG9ydCB7IGRlY29kZVBhcmFtZXRlcnMsIGVuY29kZUV2ZW50U2lnbmF0dXJlLCBlbmNvZGVGdW5jdGlvblNpZ25hdHVyZSwgZW5jb2RlUGFyYW1ldGVyLCBlbmNvZGVQYXJhbWV0ZXJzLCBpbmZlclR5cGVzQW5kRW5jb2RlUGFyYW1ldGVycywgaXNBYmlDb25zdHJ1Y3RvckZyYWdtZW50LCBqc29uSW50ZXJmYWNlTWV0aG9kVG9TdHJpbmcsIH0gZnJvbSAnd2ViMy1ldGgtYWJpJztcbmltcG9ydCB7IGJsb2NrU2NoZW1hLCBBTExfRVZFTlRTIH0gZnJvbSAnd2ViMy1ldGgnO1xuaW1wb3J0IHsgV2ViM0NvbnRyYWN0RXJyb3IgfSBmcm9tICd3ZWIzLWVycm9ycyc7XG5leHBvcnQgeyBkZWNvZGVFdmVudEFCSSB9IGZyb20gJ3dlYjMtZXRoJztcbmV4cG9ydCBjb25zdCBlbmNvZGVFdmVudEFCSSA9ICh7IGFkZHJlc3MgfSwgZXZlbnQsIG9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHRvcGljcyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50b3BpY3M7XG4gICAgY29uc3QgZmlsdGVyID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpbHRlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgY29uc3Qgb3B0cyA9IHt9O1xuICAgIGlmICghaXNOdWxsaXNoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mcm9tQmxvY2spKSB7XG4gICAgICAgIG9wdHMuZnJvbUJsb2NrID0gZm9ybWF0KGJsb2NrU2NoZW1hLnByb3BlcnRpZXMubnVtYmVyLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZnJvbUJsb2NrLCB7XG4gICAgICAgICAgICBudW1iZXI6IEZNVF9OVU1CRVIuSEVYLFxuICAgICAgICAgICAgYnl0ZXM6IEZNVF9CWVRFUy5IRVgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWlzTnVsbGlzaChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudG9CbG9jaykpIHtcbiAgICAgICAgb3B0cy50b0Jsb2NrID0gZm9ybWF0KGJsb2NrU2NoZW1hLnByb3BlcnRpZXMubnVtYmVyLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudG9CbG9jaywge1xuICAgICAgICAgICAgbnVtYmVyOiBGTVRfTlVNQkVSLkhFWCxcbiAgICAgICAgICAgIGJ5dGVzOiBGTVRfQllURVMuSEVYLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRvcGljcyAmJiBBcnJheS5pc0FycmF5KHRvcGljcykpIHtcbiAgICAgICAgb3B0cy50b3BpY3MgPSBbLi4udG9waWNzXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9wdHMudG9waWNzID0gW107XG4gICAgICAgIC8vIGFkZCBldmVudCBzaWduYXR1cmVcbiAgICAgICAgaWYgKGV2ZW50ICYmICFldmVudC5hbm9ueW1vdXMgJiYgIVtBTExfRVZFTlRTLCAnYWxsRXZlbnRzJ10uaW5jbHVkZXMoZXZlbnQubmFtZSkpIHtcbiAgICAgICAgICAgIG9wdHMudG9waWNzLnB1c2goKF9iID0gZXZlbnQuc2lnbmF0dXJlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBlbmNvZGVFdmVudFNpZ25hdHVyZShqc29uSW50ZXJmYWNlTWV0aG9kVG9TdHJpbmcoZXZlbnQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIGV2ZW50IHRvcGljcyAoaW5kZXhlZCBhcmd1bWVudHMpXG4gICAgICAgIGlmICghW0FMTF9FVkVOVFMsICdhbGxFdmVudHMnXS5pbmNsdWRlcyhldmVudC5uYW1lKSAmJiBldmVudC5pbnB1dHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaW5wdXQgb2YgZXZlbnQuaW5wdXRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZpbHRlcltpbnB1dC5uYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1udWxsL25vLW51bGxcbiAgICAgICAgICAgICAgICAgICAgb3B0cy50b3BpY3MucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93ZWIzLmpzL2lzc3Vlcy8zNDRcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBkZWFsIHByb3Blcmx5IHdpdGggY29tcG9uZW50c1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnRvcGljcy5wdXNoKHZhbHVlLm1hcCh2ID0+IGVuY29kZVBhcmFtZXRlcihpbnB1dC50eXBlLCB2KSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbnB1dC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnRvcGljcy5wdXNoKGtlY2NhazI1Nih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy50b3BpY3MucHVzaChlbmNvZGVQYXJhbWV0ZXIoaW5wdXQudHlwZSwgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFvcHRzLnRvcGljcy5sZW5ndGgpXG4gICAgICAgIGRlbGV0ZSBvcHRzLnRvcGljcztcbiAgICBpZiAoYWRkcmVzcykge1xuICAgICAgICBvcHRzLmFkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiBvcHRzO1xufTtcbmV4cG9ydCBjb25zdCBlbmNvZGVNZXRob2RBQkkgPSAoYWJpLCBhcmdzLCBkZXBsb3lEYXRhKSA9PiB7XG4gICAgY29uc3QgaW5wdXRMZW5ndGggPSBBcnJheS5pc0FycmF5KGFiaS5pbnB1dHMpID8gYWJpLmlucHV0cy5sZW5ndGggOiAwO1xuICAgIGlmIChhYmkuaW5wdXRzICYmIGlucHV0TGVuZ3RoICE9PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgV2ViM0NvbnRyYWN0RXJyb3IoYFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGlzIG5vdCBtYXRjaGluZyB0aGUgbWV0aG9kcyByZXF1aXJlZCBudW1iZXIuIFlvdSBuZWVkIHRvIHBhc3MgJHtpbnB1dExlbmd0aH0gYXJndW1lbnRzLmApO1xuICAgIH1cbiAgICBsZXQgcGFyYW1zO1xuICAgIGlmIChhYmkuaW5wdXRzKSB7XG4gICAgICAgIHBhcmFtcyA9IGVuY29kZVBhcmFtZXRlcnMoQXJyYXkuaXNBcnJheShhYmkuaW5wdXRzKSA/IGFiaS5pbnB1dHMgOiBbXSwgYXJncykucmVwbGFjZSgnMHgnLCAnJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXJhbXMgPSBpbmZlclR5cGVzQW5kRW5jb2RlUGFyYW1ldGVycyhhcmdzKS5yZXBsYWNlKCcweCcsICcnKTtcbiAgICB9XG4gICAgaWYgKGlzQWJpQ29uc3RydWN0b3JGcmFnbWVudChhYmkpKSB7XG4gICAgICAgIGlmICghZGVwbG95RGF0YSlcbiAgICAgICAgICAgIHRocm93IG5ldyBXZWIzQ29udHJhY3RFcnJvcignVGhlIGNvbnRyYWN0IGhhcyBubyBjb250cmFjdCBkYXRhIG9wdGlvbiBzZXQuIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGFwcGVuZCB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycy4nKTtcbiAgICAgICAgaWYgKCFkZXBsb3lEYXRhLnN0YXJ0c1dpdGgoJzB4JykpIHtcbiAgICAgICAgICAgIHJldHVybiBgMHgke2RlcGxveURhdGF9JHtwYXJhbXN9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7ZGVwbG95RGF0YX0ke3BhcmFtc31gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7ZW5jb2RlRnVuY3Rpb25TaWduYXR1cmUoYWJpKX0ke3BhcmFtc31gO1xufTtcbmV4cG9ydCBjb25zdCBkZWNvZGVNZXRob2RSZXR1cm4gPSAoYWJpLCByZXR1cm5WYWx1ZXMpID0+IHtcbiAgICAvLyBJZiBpdCB3YXMgY29uc3RydWN0b3IgdGhlbiB3ZSBuZWVkIHRvIHJldHVybiBjb250cmFjdCBhZGRyZXNzXG4gICAgaWYgKGFiaS50eXBlID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG4gICAgfVxuICAgIGlmICghcmV0dXJuVmFsdWVzKSB7XG4gICAgICAgIC8vIFVzaW5nIFwibnVsbFwiIHZhbHVlIGludGVudGlvbmFsbHkgdG8gbWF0Y2ggbGVnYWN5IGJlaGF2aW9yXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1udWxsL25vLW51bGxcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcmV0dXJuVmFsdWVzLmxlbmd0aCA+PSAyID8gcmV0dXJuVmFsdWVzLnNsaWNlKDIpIDogcmV0dXJuVmFsdWVzO1xuICAgIGlmICghYWJpLm91dHB1dHMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW51bGwvbm8tbnVsbFxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZGVjb2RlUGFyYW1ldGVycyhbLi4uYWJpLm91dHB1dHNdLCB2YWx1ZSk7XG4gICAgaWYgKHJlc3VsdC5fX2xlbmd0aF9fID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRbMF07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RpbmcuanMubWFwIl0sIm5hbWVzIjpbImZvcm1hdCIsImlzTnVsbGlzaCIsImtlY2NhazI1NiIsIkZNVF9OVU1CRVIiLCJGTVRfQllURVMiLCJkZWNvZGVQYXJhbWV0ZXJzIiwiZW5jb2RlRXZlbnRTaWduYXR1cmUiLCJlbmNvZGVGdW5jdGlvblNpZ25hdHVyZSIsImVuY29kZVBhcmFtZXRlciIsImVuY29kZVBhcmFtZXRlcnMiLCJpbmZlclR5cGVzQW5kRW5jb2RlUGFyYW1ldGVycyIsImlzQWJpQ29uc3RydWN0b3JGcmFnbWVudCIsImpzb25JbnRlcmZhY2VNZXRob2RUb1N0cmluZyIsImJsb2NrU2NoZW1hIiwiQUxMX0VWRU5UUyIsIldlYjNDb250cmFjdEVycm9yIiwiZGVjb2RlRXZlbnRBQkkiLCJlbmNvZGVFdmVudEFCSSIsImFkZHJlc3MiLCJldmVudCIsIm9wdGlvbnMiLCJfYSIsIl9iIiwidG9waWNzIiwiZmlsdGVyIiwib3B0cyIsImZyb21CbG9jayIsInByb3BlcnRpZXMiLCJudW1iZXIiLCJIRVgiLCJieXRlcyIsInRvQmxvY2siLCJBcnJheSIsImlzQXJyYXkiLCJhbm9ueW1vdXMiLCJpbmNsdWRlcyIsIm5hbWUiLCJwdXNoIiwic2lnbmF0dXJlIiwiaW5wdXRzIiwiaW5wdXQiLCJpbmRleGVkIiwidmFsdWUiLCJtYXAiLCJ2IiwidHlwZSIsImxlbmd0aCIsInRvTG93ZXJDYXNlIiwiZW5jb2RlTWV0aG9kQUJJIiwiYWJpIiwiYXJncyIsImRlcGxveURhdGEiLCJpbnB1dExlbmd0aCIsInBhcmFtcyIsInJlcGxhY2UiLCJzdGFydHNXaXRoIiwiZGVjb2RlTWV0aG9kUmV0dXJuIiwicmV0dXJuVmFsdWVzIiwic2xpY2UiLCJvdXRwdXRzIiwicmVzdWx0IiwiX19sZW5ndGhfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Contract: () => (/* reexport safe */ _contract_js__WEBPACK_IMPORTED_MODULE_0__.Contract),\n/* harmony export */   LogsSubscription: () => (/* reexport safe */ _log_subscription_js__WEBPACK_IMPORTED_MODULE_2__.LogsSubscription),\n/* harmony export */   decodeEventABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeEventABI),\n/* harmony export */   decodeMethodReturn: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMethodReturn),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   encodeEventABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.encodeEventABI),\n/* harmony export */   encodeMethodABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.encodeMethodABI),\n/* harmony export */   getCreateAccessListParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getCreateAccessListParams),\n/* harmony export */   getEstimateGasParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getEstimateGasParams),\n/* harmony export */   getEthTxCallParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getEthTxCallParams),\n/* harmony export */   getSendTxParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getSendTxParams),\n/* harmony export */   isWeb3ContractContext: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.isWeb3ContractContext)\n/* harmony export */ });\n/* harmony import */ var _contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contract.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/* harmony import */ var _log_subscription_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./log_subscription.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * The `web3.eth.Contract` object makes it easy to interact with smart contracts on the Ethereum blockchain.\n * When you create a new contract object you give it the JSON interface of the respective smart contract and\n * web3 will auto convert all calls into low level ABI calls over RPC for you.\n * This allows you to interact with smart contracts as if they were JavaScript objects.\n *\n * To use it standalone:\n *\n * ```ts\n * const Contract = require('web3-eth-contract');\n *\n * // set provider for all later instances to use\n * Contract.setProvider('ws://localhost:8546');\n *\n * const contract = new Contract(jsonInterface, address);\n *\n * contract.methods.somFunc().send({from: ....})\n * .on('receipt', function(){\n *    ...\n * });\n * ```\n */ /**\n * This comment _supports3_ [Markdown](https://marked.js.org/)\n */ \n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_contract_js__WEBPACK_IMPORTED_MODULE_0__.Contract); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQkMsR0FDRDs7Q0FFQyxHQUN3QztBQUNYO0FBQ0E7QUFDUTtBQUNYO0FBQ0E7QUFDM0IsaUVBQWVBLGtEQUFRQSxFQUFDLENBQ3hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1maWxlcy8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1jb250cmFjdC9saWIvZXNtL2luZGV4LmpzPzM0NjkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIFRoZSBgd2ViMy5ldGguQ29udHJhY3RgIG9iamVjdCBtYWtlcyBpdCBlYXN5IHRvIGludGVyYWN0IHdpdGggc21hcnQgY29udHJhY3RzIG9uIHRoZSBFdGhlcmV1bSBibG9ja2NoYWluLlxuICogV2hlbiB5b3UgY3JlYXRlIGEgbmV3IGNvbnRyYWN0IG9iamVjdCB5b3UgZ2l2ZSBpdCB0aGUgSlNPTiBpbnRlcmZhY2Ugb2YgdGhlIHJlc3BlY3RpdmUgc21hcnQgY29udHJhY3QgYW5kXG4gKiB3ZWIzIHdpbGwgYXV0byBjb252ZXJ0IGFsbCBjYWxscyBpbnRvIGxvdyBsZXZlbCBBQkkgY2FsbHMgb3ZlciBSUEMgZm9yIHlvdS5cbiAqIFRoaXMgYWxsb3dzIHlvdSB0byBpbnRlcmFjdCB3aXRoIHNtYXJ0IGNvbnRyYWN0cyBhcyBpZiB0aGV5IHdlcmUgSmF2YVNjcmlwdCBvYmplY3RzLlxuICpcbiAqIFRvIHVzZSBpdCBzdGFuZGFsb25lOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBDb250cmFjdCA9IHJlcXVpcmUoJ3dlYjMtZXRoLWNvbnRyYWN0Jyk7XG4gKlxuICogLy8gc2V0IHByb3ZpZGVyIGZvciBhbGwgbGF0ZXIgaW5zdGFuY2VzIHRvIHVzZVxuICogQ29udHJhY3Quc2V0UHJvdmlkZXIoJ3dzOi8vbG9jYWxob3N0Ojg1NDYnKTtcbiAqXG4gKiBjb25zdCBjb250cmFjdCA9IG5ldyBDb250cmFjdChqc29uSW50ZXJmYWNlLCBhZGRyZXNzKTtcbiAqXG4gKiBjb250cmFjdC5tZXRob2RzLnNvbUZ1bmMoKS5zZW5kKHtmcm9tOiAuLi4ufSlcbiAqIC5vbigncmVjZWlwdCcsIGZ1bmN0aW9uKCl7XG4gKiAgICAuLi5cbiAqIH0pO1xuICogYGBgXG4gKi9cbi8qKlxuICogVGhpcyBjb21tZW50IF9zdXBwb3J0czNfIFtNYXJrZG93bl0oaHR0cHM6Ly9tYXJrZWQuanMub3JnLylcbiAqL1xuaW1wb3J0IHsgQ29udHJhY3QgfSBmcm9tICcuL2NvbnRyYWN0LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZW5jb2RpbmcuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb250cmFjdC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvZ19zdWJzY3JpcHRpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IENvbnRyYWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkNvbnRyYWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/log_subscription.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogsSubscription: () => (/* binding */ LogsSubscription)\n/* harmony export */ });\n/* harmony import */ var web3_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/web3-core/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n/**\n * LogSubscription to be used to subscribe to events logs.\n *\n * Following events are supported and can be accessed with either {@link LogsSubscription.once} or ${@link LogsSubscription.on} methods.\n *\n * - **connected**: Emitted when the subscription is connected.\n * - **data**: Fires on each incoming event with the event object as argument.\n * - **changed**: Fires on each event which was removed from the blockchain. The event will have the additional property `removed: true`.\n * - **error**: Fires on each error.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent({\n *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n *   fromBlock: 0\n * });\n *\n * subscription.on(\"connected\", function(subscriptionId){\n *   console.log(subscriptionId);\n * });\n *\n * subscription.on('data', function(event){\n *   console.log(event); // same results as the optional callback above\n * });\n *\n * subscription.on('changed', function(event){\n *   // remove event from local database\n * })\n *\n * subscription.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n *   ...\n * });\n *\n * // event output example\n * > {\n *   returnValues: {\n *       myIndexedParam: 20,\n *       myOtherIndexedParam: '0x123456789...',\n *       myNonIndexParam: 'My String'\n *   },\n *   raw: {\n *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n *   },\n *   event: 'MyEvent',\n *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   logIndex: 0,\n *   transactionIndex: 0,\n *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   blockNumber: 1234,\n *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n * }\n * ```\n */ class LogsSubscription extends web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Subscription {\n    constructor(args, options){\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        super(args, options);\n        this.address = args.address;\n        this.topics = args.topics;\n        this.abi = args.abi;\n        this.jsonInterface = args.jsonInterface;\n    }\n    _buildSubscriptionParams() {\n        return [\n            \"logs\",\n            {\n                address: this.address,\n                topics: this.topics\n            }\n        ];\n    }\n    formatSubscriptionResult(data) {\n        return (0,web3_eth__WEBPACK_IMPORTED_MODULE_1__.decodeEventABI)(this.abi, data, this.jsonInterface, super.returnFormat);\n    }\n} //# sourceMappingURL=log_subscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9sb2dfc3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUM2QztBQUNIO0FBQzFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFEQyxHQUNNLE1BQU1FLHlCQUF5QkYsdURBQWdCQTtJQUNsREcsWUFBWUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDdkIsaUVBQWlFO1FBQ2pFLEtBQUssQ0FBQ0QsTUFBTUM7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBR0YsS0FBS0UsT0FBTztRQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBR0gsS0FBS0csTUFBTTtRQUN6QixJQUFJLENBQUNDLEdBQUcsR0FBR0osS0FBS0ksR0FBRztRQUNuQixJQUFJLENBQUNDLGFBQWEsR0FBR0wsS0FBS0ssYUFBYTtJQUMzQztJQUNBQywyQkFBMkI7UUFDdkIsT0FBTztZQUFDO1lBQVE7Z0JBQUVKLFNBQVMsSUFBSSxDQUFDQSxPQUFPO2dCQUFFQyxRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUFDO1NBQUU7SUFDbkU7SUFDQUkseUJBQXlCQyxJQUFJLEVBQUU7UUFDM0IsT0FBT1gsd0RBQWNBLENBQUMsSUFBSSxDQUFDTyxHQUFHLEVBQUVJLE1BQU0sSUFBSSxDQUFDSCxhQUFhLEVBQUUsS0FBSyxDQUFDSTtJQUNwRTtBQUNKLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWZpbGVzLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWNvbnRyYWN0L2xpYi9lc20vbG9nX3N1YnNjcmlwdGlvbi5qcz9jYjY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuaW1wb3J0IHsgV2ViM1N1YnNjcmlwdGlvbiB9IGZyb20gJ3dlYjMtY29yZSc7XG5pbXBvcnQgeyBkZWNvZGVFdmVudEFCSSB9IGZyb20gJ3dlYjMtZXRoJztcbi8qKlxuICogTG9nU3Vic2NyaXB0aW9uIHRvIGJlIHVzZWQgdG8gc3Vic2NyaWJlIHRvIGV2ZW50cyBsb2dzLlxuICpcbiAqIEZvbGxvd2luZyBldmVudHMgYXJlIHN1cHBvcnRlZCBhbmQgY2FuIGJlIGFjY2Vzc2VkIHdpdGggZWl0aGVyIHtAbGluayBMb2dzU3Vic2NyaXB0aW9uLm9uY2V9IG9yICR7QGxpbmsgTG9nc1N1YnNjcmlwdGlvbi5vbn0gbWV0aG9kcy5cbiAqXG4gKiAtICoqY29ubmVjdGVkKio6IEVtaXR0ZWQgd2hlbiB0aGUgc3Vic2NyaXB0aW9uIGlzIGNvbm5lY3RlZC5cbiAqIC0gKipkYXRhKio6IEZpcmVzIG9uIGVhY2ggaW5jb21pbmcgZXZlbnQgd2l0aCB0aGUgZXZlbnQgb2JqZWN0IGFzIGFyZ3VtZW50LlxuICogLSAqKmNoYW5nZWQqKjogRmlyZXMgb24gZWFjaCBldmVudCB3aGljaCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBibG9ja2NoYWluLiBUaGUgZXZlbnQgd2lsbCBoYXZlIHRoZSBhZGRpdGlvbmFsIHByb3BlcnR5IGByZW1vdmVkOiB0cnVlYC5cbiAqIC0gKiplcnJvcioqOiBGaXJlcyBvbiBlYWNoIGVycm9yLlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBzdWJzY3JpcHRpb24gPSBhd2FpdCBteUNvbnRyYWN0LmV2ZW50cy5NeUV2ZW50KHtcbiAqICAgZmlsdGVyOiB7bXlJbmRleGVkUGFyYW06IFsyMCwyM10sIG15T3RoZXJJbmRleGVkUGFyYW06ICcweDEyMzQ1Njc4OS4uLid9LCAvLyBVc2luZyBhbiBhcnJheSBtZWFucyBPUjogZS5nLiAyMCBvciAyM1xuICogICBmcm9tQmxvY2s6IDBcbiAqIH0pO1xuICpcbiAqIHN1YnNjcmlwdGlvbi5vbihcImNvbm5lY3RlZFwiLCBmdW5jdGlvbihzdWJzY3JpcHRpb25JZCl7XG4gKiAgIGNvbnNvbGUubG9nKHN1YnNjcmlwdGlvbklkKTtcbiAqIH0pO1xuICpcbiAqIHN1YnNjcmlwdGlvbi5vbignZGF0YScsIGZ1bmN0aW9uKGV2ZW50KXtcbiAqICAgY29uc29sZS5sb2coZXZlbnQpOyAvLyBzYW1lIHJlc3VsdHMgYXMgdGhlIG9wdGlvbmFsIGNhbGxiYWNrIGFib3ZlXG4gKiB9KTtcbiAqXG4gKiBzdWJzY3JpcHRpb24ub24oJ2NoYW5nZWQnLCBmdW5jdGlvbihldmVudCl7XG4gKiAgIC8vIHJlbW92ZSBldmVudCBmcm9tIGxvY2FsIGRhdGFiYXNlXG4gKiB9KVxuICpcbiAqIHN1YnNjcmlwdGlvbi5vbignZXJyb3InLCBmdW5jdGlvbihlcnJvciwgcmVjZWlwdCkgeyAvLyBJZiB0aGUgdHJhbnNhY3Rpb24gd2FzIHJlamVjdGVkIGJ5IHRoZSBuZXR3b3JrIHdpdGggYSByZWNlaXB0LCB0aGUgc2Vjb25kIHBhcmFtZXRlciB3aWxsIGJlIHRoZSByZWNlaXB0LlxuICogICAuLi5cbiAqIH0pO1xuICpcbiAqIC8vIGV2ZW50IG91dHB1dCBleGFtcGxlXG4gKiA+IHtcbiAqICAgcmV0dXJuVmFsdWVzOiB7XG4gKiAgICAgICBteUluZGV4ZWRQYXJhbTogMjAsXG4gKiAgICAgICBteU90aGVySW5kZXhlZFBhcmFtOiAnMHgxMjM0NTY3ODkuLi4nLFxuICogICAgICAgbXlOb25JbmRleFBhcmFtOiAnTXkgU3RyaW5nJ1xuICogICB9LFxuICogICByYXc6IHtcbiAqICAgICAgIGRhdGE6ICcweDdmOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3OWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MTM4NScsXG4gKiAgICAgICB0b3BpY3M6IFsnMHhmZDQzYWRlMWMwOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MWZmZGQ1N2E3YWY2NmFiNGVhZDcnLCAnMHg3ZjlmYWRlMWMwZDU3YTdhZjY2YWI0ZWFkNzlmYWRlMWMwZDU3YTdhZjY2YWI0ZWFkN2MyYzJlYjdiMTFhOTEzODUnXVxuICogICB9LFxuICogICBldmVudDogJ015RXZlbnQnLFxuICogICBzaWduYXR1cmU6ICcweGZkNDNhZGUxYzA5ZmFkZTFjMGQ1N2E3YWY2NmFiNGVhZDdjMmMyZWI3YjExYTkxZmZkZDU3YTdhZjY2YWI0ZWFkNycsXG4gKiAgIGxvZ0luZGV4OiAwLFxuICogICB0cmFuc2FjdGlvbkluZGV4OiAwLFxuICogICB0cmFuc2FjdGlvbkhhc2g6ICcweDdmOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3OWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MTM4NScsXG4gKiAgIGJsb2NrSGFzaDogJzB4ZmQ0M2FkZTFjMDlmYWRlMWMwZDU3YTdhZjY2YWI0ZWFkN2MyYzJlYjdiMTFhOTFmZmRkNTdhN2FmNjZhYjRlYWQ3JyxcbiAqICAgYmxvY2tOdW1iZXI6IDEyMzQsXG4gKiAgIGFkZHJlc3M6ICcweGRlMEIyOTU2NjlhOUZEOTNkNUYyOEQ5RWM4NUU0MGY0Y2I2OTdCQWUnXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIExvZ3NTdWJzY3JpcHRpb24gZXh0ZW5kcyBXZWIzU3Vic2NyaXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgIHN1cGVyKGFyZ3MsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhcmdzLmFkZHJlc3M7XG4gICAgICAgIHRoaXMudG9waWNzID0gYXJncy50b3BpY3M7XG4gICAgICAgIHRoaXMuYWJpID0gYXJncy5hYmk7XG4gICAgICAgIHRoaXMuanNvbkludGVyZmFjZSA9IGFyZ3MuanNvbkludGVyZmFjZTtcbiAgICB9XG4gICAgX2J1aWxkU3Vic2NyaXB0aW9uUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gWydsb2dzJywgeyBhZGRyZXNzOiB0aGlzLmFkZHJlc3MsIHRvcGljczogdGhpcy50b3BpY3MgfV07XG4gICAgfVxuICAgIGZvcm1hdFN1YnNjcmlwdGlvblJlc3VsdChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVFdmVudEFCSSh0aGlzLmFiaSwgZGF0YSwgdGhpcy5qc29uSW50ZXJmYWNlLCBzdXBlci5yZXR1cm5Gb3JtYXQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ19zdWJzY3JpcHRpb24uanMubWFwIl0sIm5hbWVzIjpbIldlYjNTdWJzY3JpcHRpb24iLCJkZWNvZGVFdmVudEFCSSIsIkxvZ3NTdWJzY3JpcHRpb24iLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJvcHRpb25zIiwiYWRkcmVzcyIsInRvcGljcyIsImFiaSIsImpzb25JbnRlcmZhY2UiLCJfYnVpbGRTdWJzY3JpcHRpb25QYXJhbXMiLCJmb3JtYXRTdWJzY3JpcHRpb25SZXN1bHQiLCJkYXRhIiwicmV0dXJuRm9ybWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/  //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ1UsQ0FDVixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZmlsZXMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS90eXBlcy5qcz9hZjMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCreateAccessListParams: () => (/* binding */ getCreateAccessListParams),\n/* harmony export */   getEstimateGasParams: () => (/* binding */ getEstimateGasParams),\n/* harmony export */   getEthTxCallParams: () => (/* binding */ getEthTxCallParams),\n/* harmony export */   getSendTxParams: () => (/* binding */ getSendTxParams),\n/* harmony export */   isWeb3ContractContext: () => (/* binding */ isWeb3ContractContext)\n/* harmony export */ });\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\nconst dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill)=>{\n    var _a, _b;\n    const tx = {};\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(txParams.data) || dataInputFill === \"both\") {\n        tx.data = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params, (_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input);\n    }\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(txParams.input) || dataInputFill === \"both\") {\n        tx.input = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);\n    }\n    // if input and data is empty, use web3config default\n    if ((0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(tx.input) && (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(tx.data)) {\n        tx[dataInputFill] = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params);\n    }\n    return {\n        data: tx.data,\n        input: tx.input\n    };\n};\nconst getSendTxParams = ({ abi, params, options, contractOptions })=>{\n    var _a, _b, _c;\n    const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;\n    if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError('Contract \"from\" address not specified');\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst getEthTxCallParams = ({ abi, params, options, contractOptions })=>{\n    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst getEstimateGasParams = ({ abi, params, options, contractOptions })=>{\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst isWeb3ContractContext = (options)=>typeof options === \"object\" && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(options) && Object.keys(options).length !== 0 && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isContractInitOptions)(options);\nconst getCreateAccessListParams = ({ abi, params, options, contractOptions })=>{\n    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError('Contract \"from\" address not specified');\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n}; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\n");

/***/ })

};
;